# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/i2c/google,cros-ec-i2c-tunnel.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: I2C bus that tunnels through the ChromeOS EC (cros-ec)

maintainers:
  - Benson Leung <bleung@chromium.org>
  - Enric Balletbo i Serra <enric.balletbo@collabora.com>

description: |
  On some ChromeOS board designs we've got a connection to the EC (embedded
  controller) but no direct connection to some devices on the other side of
  the EC (like a battery and PMIC). To get access to those devices we need
  to tunnel our i2c commands through the EC.
  The node for this device should be under a cros-ec node like google,cros-ec-spi
  or google,cros-ec-i2c.

allOf:
  - $ref: /schemas/i2c/i2c-controller.yaml#

properties:
  compatible:
    const:
      google,cros-ec-i2c-tunnel

  google,remote-bus:
    $ref: "/schemas/types.yaml#/definitions/uint32"
    description: The EC bus we'd like to talk to.

  "#address-cells": true
  "#size-cells": true

patternProperties:
  "^.*@[0-9a-f]+$":
    type: object
    description: One node per I2C device connected to the tunnelled I2C bus.

additionalProperties: false

required:
  - compatible
  - google,remote-bus

examples:
  - |
    spi0 {
        #address-cells = <1>;
        #size-cells = <0>;
        cros-ec@0 {
            compatible = "google,cros-ec-spi";
            reg = <0>;

            i2c-tunnel {
                compatible = "google,cros-ec-i2c-tunnel";
                #address-cells = <1>;
                #size-cells = <0>;
                google,remote-bus = <0>;

                battery: battery@b {
                    compatible = "sbs,sbs-battery";
                    reg = <0xb>;
                    sbs,poll-retry-count = <1>;
                };
            };
        };
    };
